local luaclang = require "luaclang"

describe("parser object creation tests", function() 
        it("succeeds in creating object for an available file", function()
                assert.has_no.errors(function() 
                        luaclang.newParser("input/main_functions.c")
                end)
        end)

        it("fails to create an object for an unavailable file", function()
                assert.has.errors(function()
                        luaclang.newParser("input/non_existent.c")
                end, "file doesn't exist")
        end)

end)

describe("cursor creation test", function() 
        it("succeeds in creating translation unit cursor", function() 
                local parser = luaclang.newParser("input/main_functions.c")
                assert.has_no.errors(function()
                        local cursor = parser:getCursor()
                end)
        end)       
end)

describe("cursor spelling tests", function() 
        it("succeeds in matching the expected output", function()
                local parser = luaclang.newParser("input/main_functions.c")
                local cursor = parser:getCursor()
                local cursor_spelling = cursor:getSpelling()
                assert.are.equals(cursor_spelling, "input/main_functions.c")
        end)
end)

describe("parser object disposal tests", function()
        it("succeeds in disposing an existing parser object", function()
                local parser = luaclang.newParser("input/main_functions.c")
                assert.has_no.errors(function()
                        parser:disposeParser()
                end)
        end)
        
        it("fails when a disposed parser object is used for cursor creation", function()
                local parser = luaclang.newParser("input/main_functions.c")
                parser:disposeParser()
                assert.has.errors(function()
                        local cursor = parser:getCursor()
                end, "calling 'getCursor' on bad self (parser object was disposed)")
        end)
end)
